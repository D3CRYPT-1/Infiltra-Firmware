Infiltra Raspberry Pi Connect 

Tagline: Peer‑to‑peer control, file transfer, mesh Wi‑Fi, and BLE scanning — all powered by m‑Firmware.

Status: BetaLast updated: August 25, 2025

Overview

Infiltra Raspberry Pi Connect ("RPi Connect") is a networking feature in m‑Firmware that uses Wi‑Fi and Bluetooth to create secure, ad‑hoc links between your Raspberry Pi devices. With RPi Connect you can:

Establish peer‑to‑peer (P2P) connections between Infiltra devices.

Use either device as a host or a controller — dynamically.

Send files quickly between nearby devices.

Spin up a mesh Wi‑Fi overlay for multi‑hop connectivity.

Build a distributed BLE scanning network.

Get terminal access to any connected Raspberry Pi.

Discover, manage, and control fleets of Pis running the Infiltra RPi Connect client.

This page covers what it does, how it works, and how to get started.

Key Capabilities

1) P2P links over Wi‑Fi + Bluetooth

Opportunistic transport selection with Wi‑Fi preferred and BLE fallback.

Auto‑reconnect with back‑off; link health monitoring.

2) Host / Controller roles

Host exposes services (files, shell, sensors, GPIO, etc.).

Controller discovers hosts and orchestrates actions.

Devices can switch roles on the fly or run dual‑role.

3) Fast file transfer

Nearby, encrypted direct transfers.

Queue multiple files; resume on intermittent links.

Optional TTL and auto‑delete for drop‑box workflows.

4) Mesh Wi‑Fi overlay (ad‑hoc)

Self‑forming, self‑healing mesh for multi‑hop reach.

Per‑node metrics (ETX/RSSI) to guide routing.

Power‑aware participation for battery nodes.

5) BLE scanning network

Turn any Pi into a scanner to crowd‑source BLE observations.

Filter by UUID, company ID, or patterns; tag scans by location/role.

Aggregate results to a chosen host or export locally.

6) Terminal access to the RPi

Secure shell over the active transport (Wi‑Fi or BLE UART).

Session logging and clipboard paste support.

7) Fleet discovery & control

Scan for Pis running the Infiltra RPi Connect client.

Group by tags (e.g., kiosk, lab-a, field).

Run commands, push configs, or update modules by group.

Quick Start

The steps below assume m‑Firmware is already installed on your Raspberry Pi.

Enable RPi Connect

sudo infiltra-connect enable

Discover nearby Infiltra devices

infiltra-connect scan

Pair & set role

# Pair as controller to a host device
infiltra-connect pair <device-id> --role controller

Open a terminal session

infiltra-connect shell <device-id>

Send a file

infiltra-connect send ./build/artifact.tar.gz --to <device-id>

Bring up the mesh

infiltra-connect mesh up

Start BLE scanning (optional)

infiltra-connect ble scan --uuid FFE0 --tag field-kit

This By Default is Done Automatically n Both Devices

Feature Summary

Area

What it does

Notes

P2P Link

Direct, encrypted Wi‑Fi/BLE link

Auto‑reconnect, QoS aware

Roles

Host / Controller / Dual

Hot‑switch roles

Files

Direct transfer, queue & resume

Optional TTL, drop‑box mode

Mesh

Ad‑hoc multi‑hop Wi‑Fi overlay

Self‑healing, metrics‑driven

BLE Net

Distributed scanning & filtering

Tagged scans, local export

Terminal

Shell over current transport

Session logs

Fleet

Discover/control Infiltra Pis

Group actions & updates

Architecture

Connect Client (Agent): Runs on each Pi; handles discovery, pairing, and transports.

Control Plane: Auth, pairing, role negotiation, and command dispatch.

Data Plane: File streams, shell sessions, BLE scan results.

Transports: Wi‑Fi ad‑hoc/Direct ➜ primary; BLE (GATT/UART) ➜ fallback.

Mesh Module: Forms an ad‑hoc SSID and exchanges routing beacons.

Discovery: Local broadcast (Wi‑Fi) + BLE advertisements; filterable by tag.

Security

Mutual device authentication during pairing.

Encrypted channels for both control and data.

Per‑command permission checks; optional role‑based profiles.

Rotating keys and revocation list support.

Audit log of connect, file, and shell events (local ring buffer).

Tip: rotate keys on shared fleet devices and use tags to scope control actions.

System Requirements

Hardware: Raspberry Pi 3B+ or newer with Wi‑Fi & BLE. (Pi 02 W Works As Well)

OS: Raspberry Pi OS (Bookworm, 32/64‑bit) or Ubuntu 22.04+/24.04+ for ARM.

Kernel: 5.15+ recommended.

Power: Stable 5V supply; mesh nodes benefit from cooling.

CLI Reference (Highlights)

# List known/nearby devices
infiltra-connect scan [--tag <tag>] [--ble] [--wifi]

# Pair to a device and set role
infiltra-connect pair <device-id> --role <host|controller|dual>

# Send/receive files
infiltra-connect send <path> --to <device-id> [--ttl 3600]
infiltra-connect recv --from <device-id> --out ./incoming

# Terminal access
infiltra-connect shell <device-id> [--record ./sessions]

# Mesh controls
infiltra-connect mesh up
infiltra-connect mesh status
infiltra-connect mesh down

# BLE scanning
infiltra-connect ble scan [--uuid <id>] [--cid <company>] [--tag <name>]

# Group operations
infiltra-connect group set <tag> <device-id...>
infiltra-connect run --tag <tag> -- "uptime && vcgencmd measure_temp"

Local API Sketch (for integrations)

Example endpoint sketch — adapt to your implementation.

GET  /v1/devices — list nearby/paired devices

POST /v1/connect — initiate P2P link {device_id, role}

POST /v1/files — start file transfer {to, path, ttl}

GET  /v1/mesh/status — current mesh state & metrics

POST /v1/ble/scan — start/stop scan {filters, tag}

POST /v1/shell — open shell {device_id, record}

Common Use Cases

Field service kits: Controller Pi in a technician’s bag linking to hosts in kiosks.

Pop‑up labs/classrooms: Rapidly share files and gain shell access without infrastructure.

Sensor sweeps: Crowd‑source BLE scans across tagged nodes and aggregate results.

On‑site staging: Mesh a cluster of Pis to pre‑load images and configs.

Performance & Limits (typical)

Wi‑Fi P2P throughput: medium‑to‑high for local transfers; reduces with hop count in mesh.

BLE fallback: low throughput; best for control, small files, and shell.

Discovery radius: room‑to‑floor scale; walls/metal reduce range.

For large file bursts, keep hops ≤2 or stage files on a nearby host.

Troubleshooting

Can’t discover devices: Ensure the Connect client is enabled and versions match; check RF interference.

Pairing fails: Clear old keys and retry; confirm time is in sync.

Slow transfers: Prefer Wi‑Fi transport; reduce mesh hops; verify power.

Shell not opening: Confirm role permits shell; check firewall and audit log.

Logs: /var/log/infiltra/connect.log (example path)

Terminology

Host: Device offering services (files, shell, sensors).

Controller: Device orchestrating actions on hosts.

Dual: Device acting as both host and controller.

Tag: A label to group devices for discovery and actions.

Legal & Safety

Intended for non‑critical use. Respect local RF laws and organizational policies.

Do not expose shell access to untrusted networks or users.

Use per‑device keys; rotate on role changes.

