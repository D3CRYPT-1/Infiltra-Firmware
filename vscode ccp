#include <M5StickCPlus2.h>
#include <SPIFFS.h>
#include <IRremote.h>
#include <algorithm>

using std::min;

struct IRCodes {
    unsigned long powerOn[5];
    unsigned long powerOff[5];
};

void handlePowerButton();
void handleActionOverlay();
void handleBrandMenu();
void handleMainMenu();
void handleSubMenu();
void displayMenuItem();
void displaySubMenu();
void drawHeader();
void drawNavigationDots();
void displayActionOverlay();
void spamIRCodes(int deviceType, int brandIndex);
void showSpamStatus();
void sendAllCodes(const IRCodes& codes, int currentCount, int totalCount, int delayMs);
void showCompletionMessage();
int getMaxSubMenuItems();
void handleSubMenuSelection();

const int IR_SEND_PIN = 19;

const int MAX_FILE_SIZE = 5000;
const char* SIGNALXNETWORK_DIR = "/SXN";
const int itemSpacing = 25;

const char* menuItems[] = {
    "Bluetooth", "WiFi", "RFID", "RF", "IR", "Files", "Config", "Settings"
};

const char* bluetoothMenu[] = {
    "Ios Spam", "Android Spam", "Google Spam", "Windows Spam", "Samsung Spam", "Ble Controller"
};

const char* wifiMenu[] = {
    "Scan Networks", "Evil Portal", "Raw Sniffer", "Packet Sniffer", "Deauth WiFi"
};

const char* rfidMenu[] = {
    "Copy RFID", "Scan Tags", "Write Tags", "Erase Tag", "Load File"
};

const char* rfMenu[] = {
    "RF Vizulizer", "Jammer", "Custom FQ", "Custom SubGhz"
};

const char* filesMenu[] = {
    "Integrated", "Web Send Files"
};

const char* irMenu[] = {
    "IR Remote", "IR Replay", "Custom IR"
};

const char* irRemoteMenu[] = {
    "TV's", "Projectors", "LedLights", "Whiteboards", "Touch Displays"
};

const char* configMenu[] = {
    "IR Mods", "Rf Mods", "RFID Mods"
};

const char* settingsMenu[] = {
    "UI Color", "Time", "Creds"
};

const char* tvBrands[] = {
    "Samsung", "LG", "Sony", "Hisense", "Philips", "Panasonic"
};

const char* projectorBrands[] = {
    "Epson", "BenQ", "ViewSonic", "Optoma", "Christie"
};

const char* ledLightBrands[] = {
    "Philips Hue", "LIFX", "Nanoleaf", "Govee", "TechLight"
};

const char* whiteboardBrands[] = {
    "Smart", "Promethean", "Clevertouch", "Boxlight", "Newline"
};

const char* touchDisplayBrands[] = {
    "ViewSonic", "Dell", "NEC", "Sharp", "LG"
};

const char* brandActions[] = {
    "Spam All"
};

const IRCodes TV_CODES[] = {
    // Samsung
    {{0xE0E040BF, 0xE0E0E01F, 0xE0E0D02F, 0xE0E019E6, 0xE0E0F00F},
     {0xE0E019E6, 0xE0E0D827, 0xE0E0C837, 0xE0E09966, 0xE0E0B04F}},
    // LG
    {{0x20DF10EF, 0x20DF23DC, 0x20DFA956, 0x20DF8877, 0x20DF0CF3},
     {0x20DF23DC, 0x20DFB44B, 0x20DF708F, 0x20DF916E, 0x20DF5AA5}},
    // Sony
    {{0xA90, 0xA50, 0xA70, 0xA30, 0xA10},
     {0xA90, 0xA50, 0xA70, 0xA30, 0xA10}},
    // Hisense
    {{0x55AA50AF, 0x55AAF00F, 0x55AA926D, 0x55AA58A7, 0x55AA7887},
     {0x55AAD02F, 0x55AA30CF, 0x55AA28D7, 0x55AAB847, 0x55AA6897}},
    // Philips
    {{0x0C32, 0x0C34, 0x0C36, 0x0C38, 0x0C40},
     {0x0C32, 0x0C34, 0x0C36, 0x0C38, 0x0C40}},
    // Panasonic
    {{0x100BCBD, 0x100ACAD, 0x1009C9D, 0x1008C8D, 0x1007C7D},
     {0x100BCBD, 0x100ACAD, 0x1009C9D, 0x1008C8D, 0x1007C7D}}
};

const IRCodes PROJECTOR_CODES[] = {
    // Epson
    {{0x4CB340BF, 0x4CB341BE, 0x4CB342BD, 0x4CB343BC, 0x4CB344BB},
     {0x4CB3748B, 0x4CB3758A, 0x4CB37689, 0x4CB37788, 0x4CB37887}},
    // BenQ
    {{0xC4DA0001, 0xC4DA0002, 0xC4DA0003, 0xC4DA0004, 0xC4DA0005},
     {0xC4DA1001, 0xC4DA1002, 0xC4DA1003, 0xC4DA1004, 0xC4DA1005}},
    // ViewSonic
    {{0x80D01001, 0x80D01002, 0x80D01003, 0x80D01004, 0x80D01005},
     {0x80D02001, 0x80D02002, 0x80D02003, 0x80D02004, 0x80D02005}},
    // Optoma
    {{0xC1AA0001, 0xC1AA0002, 0xC1AA0003, 0xC1AA0004, 0xC1AA0005},
     {0xC1AA1001, 0xC1AA1002, 0xC1AA1003, 0xC1AA1004, 0xC1AA1005}},
    // Christie
    {{0x1CE30001, 0x1CE30002, 0x1CE30003, 0x1CE30004, 0x1CE30005},
     {0x1CE31001, 0x1CE31002, 0x1CE31003, 0x1CE31004, 0x1CE31005}}
};

const IRCodes LED_CODES[] = {
    // Philips Hue
    {{0x7887A001, 0x7887A002, 0x7887A003, 0x7887A004, 0x7887A005},
     {0x7887B001, 0x7887B002, 0x7887B003, 0x7887B004, 0x7887B005}},
    // LIFX
    {{0x5AA5C001, 0x5AA5C002, 0x5AA5C003, 0x5AA5C004, 0x5AA5C005},
     {0x5AA5D001, 0x5AA5D002, 0x5AA5D003, 0x5AA5D004, 0x5AA5D005}},
    // Nanoleaf
    {{0x9966E001, 0x9966E002, 0x9966E003, 0x9966E004, 0x9966E005},
     {0x9966F001, 0x9966F002, 0x9966F003, 0x9966F004, 0x9966F005}},
    // Govee
    {{0x4BB61001, 0x4BB61002, 0x4BB61003, 0x4BB61004, 0x4BB61005},
     {0x4BB62001, 0x4BB62002, 0x4BB62003, 0x4BB62004, 0x4BB62005}},
    // TechLight
    {{0x3DD31001, 0x3DD31002, 0x3DD31003, 0x3DD31004, 0x3DD31005},
     {0x3DD32001, 0x3DD32002, 0x3DD32003, 0x3DD32004, 0x3DD32005}}
};

const IRCodes WHITEBOARD_CODES[] = {
    // Smart
    {{0x4AB51001, 0x4AB51002, 0x4AB51003, 0x4AB51004, 0x4AB51005},
     {0x4AB52001, 0x4AB52002, 0x4AB52003, 0x4AB52004, 0x4AB52005}},
    // Promethean
    {{0x5AA51001, 0x5AA51002, 0x5AA51003, 0x5AA51004, 0x5AA51005},
     {0x5AA52001, 0x5AA52002, 0x5AA52003, 0x5AA52004, 0x5AA52005}},
    // Clevertouch
    {{0x6CC51001, 0x6CC51002, 0x6CC51003, 0x6CC51004, 0x6CC51005},
     {0x6CC52001, 0x6CC52002, 0x6CC52003, 0x6CC52004, 0x6CC52005}},
    // Boxlight
    {{0x7EE51001, 0x7EE51002, 0x7EE51003, 0x7EE51004, 0x7EE51005},
     {0x7EE52001, 0x7EE52002, 0x7EE52003, 0x7EE52004, 0x7EE52005}},
    // Newline
    {{0x8001001, 0x8001002, 0x8001003, 0x8001004, 0x8001005},
     {0x8002001, 0x8002002, 0x8002003, 0x8002004, 0x8002005}}
};

const IRCodes TOUCH_DISPLAY_CODES[] = {
    // ViewSonic
    {{0x9AB51001, 0x9AB51002, 0x9AB51003, 0x9AB51004, 0x9AB51005},
     {0x9AB52001, 0x9AB52002, 0x9AB52003, 0x9AB52004, 0x9AB52005}},
    // Dell
    {{0xAAC51001, 0xAAC51002, 0xAAC51003, 0xAAC51004, 0xAAC51005},
     {0xAAC52001, 0xAAC52002, 0xAAC52003, 0xAAC52004, 0xAAC52005}},
    // NEC
    {{0xBBD51001, 0xBBD51002, 0xBBD51003, 0xBBD51004, 0xBBD51005},
     {0xBBD52001, 0xBBD52002, 0xBBD52003, 0xBBD52004, 0xBBD52005}},
    // Sharp
    {{0xCCE51001, 0xCCE51002, 0xCCE51003, 0xCCE51004, 0xCCE51005},
     {0xCCE52001, 0xCCE52002, 0xCCE52003, 0xCCE52004, 0xCCE52005}},
    // LG
    {{0xDDF51001, 0xDDF51002, 0xDDF51003, 0xDDF51004, 0xDDF51005},
     {0xDDF52001, 0xDDF52002, 0xDDF52003, 0xDDF52004, 0xDDF52005}}
};

const int numMenuItems = sizeof(menuItems) / sizeof(menuItems[0]);
const int numBluetoothItems = sizeof(bluetoothMenu) / sizeof(bluetoothMenu[0]);
const int numWifiItems = sizeof(wifiMenu) / sizeof(wifiMenu[0]);
const int numRfidItems = sizeof(rfidMenu) / sizeof(rfidMenu[0]);
const int numRfItems = sizeof(rfMenu) / sizeof(rfMenu[0]);
const int numFilesItems = sizeof(filesMenu) / sizeof(filesMenu[0]);
const int numIrItems = sizeof(irMenu) / sizeof(irMenu[0]);
const int numIrRemoteItems = sizeof(irRemoteMenu) / sizeof(irRemoteMenu[0]);
const int numConfigItems = sizeof(configMenu) / sizeof(configMenu[0]);
const int numSettingsItems = sizeof(settingsMenu) / sizeof(settingsMenu[0]);
const int numTvBrands = sizeof(tvBrands) / sizeof(tvBrands[0]);
const int numProjectorBrands = sizeof(projectorBrands) / sizeof(projectorBrands[0]);
const int numLedLightBrands = sizeof(ledLightBrands) / sizeof(ledLightBrands[0]);
const int numWhiteboardBrands = sizeof(whiteboardBrands) / sizeof(whiteboardBrands[0]);
const int numTouchDisplayBrands = sizeof(touchDisplayBrands) / sizeof(touchDisplayBrands[0]);

int currentMenuItem = 0;
int currentSubMenuItem = 0;
bool inSubmenu = false;
bool inFileMenu = true;
bool inIrRemoteMenu = false;
bool inBrandMenu = false;
bool inActionOverlay = false;
int currentBrandMenuItem = 0;
int currentDeviceType = 0;

void setup() {
    M5.begin();
    IrSender.begin(IR_SEND_PIN);
    
    if(!SPIFFS.begin(true)) {
        M5.Lcd.println("SPIFFS Mount Failed");
        return;
    }
    
    M5.Lcd.setRotation(3);
    M5.Lcd.setTextSize(3);
    M5.Lcd.setTextColor(WHITE);
    displayMenuItem();
}

void loop() {
    M5.update();
    
    if (M5.BtnPWR.wasPressed()) {
        handlePowerButton();
    }

    if (inActionOverlay) {
        handleActionOverlay();
    } else if (inBrandMenu) {
        handleBrandMenu();
    } else if (!inSubmenu) {
        handleMainMenu();
    } else {
        handleSubMenu();
    }
}

void handlePowerButton() {
    if (inActionOverlay) {
        inActionOverlay = false;
        displaySubMenu();
    } else if (inBrandMenu) {
        currentSubMenuItem = (currentSubMenuItem - 1 + getMaxSubMenuItems()) % getMaxSubMenuItems();
        displaySubMenu();
    } else if (inSubmenu) {
        currentSubMenuItem = (currentSubMenuItem - 1 + getMaxSubMenuItems() + 1) % (getMaxSubMenuItems() + 1);
        displaySubMenu();
    } else {
        currentMenuItem = (currentMenuItem - 1 + numMenuItems) % numMenuItems;
        displayMenuItem();
    }
}

void handleActionOverlay() {
    if (M5.BtnA.wasPressed()) {
        spamIRCodes(currentDeviceType, currentSubMenuItem);
        inActionOverlay = false;
        displaySubMenu();
    }
}

void handleBrandMenu() {
    if (M5.BtnB.wasPressed()) {
        currentSubMenuItem = (currentSubMenuItem + 1) % getMaxSubMenuItems();
        displaySubMenu();
    }
    if (M5.BtnA.wasPressed()) {
        if (currentSubMenuItem == getMaxSubMenuItems() - 1) {
            inBrandMenu = false;
            inIrRemoteMenu = true;
            displaySubMenu();
        } else {
            inActionOverlay = true;
            displayActionOverlay();
        }
    }
}

void handleMainMenu() {
    if (M5.BtnB.wasPressed()) {
        currentMenuItem = (currentMenuItem + 1) % numMenuItems;
        displayMenuItem();
    }
    if (M5.BtnA.wasPressed()) {
        inSubmenu = true;
        currentSubMenuItem = 0;
        displaySubMenu();
    }
}

void handleSubMenu() {
    if (M5.BtnB.wasPressed()) {
        int maxItems = getMaxSubMenuItems() + 1;
        currentSubMenuItem = (currentSubMenuItem + 1) % maxItems;
        displaySubMenu();
    }
    if (M5.BtnA.wasPressed()) {
        handleSubMenuSelection();
    }
}

void displayMenuItem() {
    M5.Lcd.fillScreen(BLACK);
    drawHeader();
    
    int prevItem = (currentMenuItem - 1 + numMenuItems) % numMenuItems;
    int nextItem = (currentMenuItem + 1) % numMenuItems;
    
    M5.Lcd.setTextSize(1);
    M5.Lcd.setTextColor(0x4208);
    M5.Lcd.drawString(menuItems[prevItem], 5, M5.Lcd.height()/2 - 30);
    M5.Lcd.drawString(menuItems[nextItem], M5.Lcd.width() - M5.Lcd.textWidth(menuItems[nextItem]) - 5, M5.Lcd.height()/2 - 30);
    
    M5.Lcd.setTextSize(3);
    M5.Lcd.setTextColor(RED);
    M5.Lcd.drawString("<", 5, M5.Lcd.height()/2 - 12);
    M5.Lcd.drawString(">", M5.Lcd.width() - 20, M5.Lcd.height()/2 - 12);
    
    M5.Lcd.setTextColor(WHITE);
    int textWidth = M5.Lcd.textWidth(menuItems[currentMenuItem]);
    int textHeight = M5.Lcd.fontHeight();
    int centerX = (M5.Lcd.width() - textWidth) / 2;
    int centerY = (M5.Lcd.height() - textHeight) / 2;
    
    M5.Lcd.setCursor(centerX, centerY);
    M5.Lcd.print(menuItems[currentMenuItem]);
    
    M5.Lcd.drawLine(centerX, centerY + textHeight + 2, centerX + textWidth, centerY + textHeight + 2, RED);
    
    drawNavigationDots();
}

void displaySubMenu() {
    M5.Lcd.fillScreen(BLACK);
    drawHeader();
    
    const char** currentSubMenu;
    int maxItems;
    
    if (inBrandMenu) {
        switch(currentDeviceType) {
            case 0: currentSubMenu = tvBrands; maxItems = numTvBrands; break;
            case 1: currentSubMenu = projectorBrands; maxItems = numProjectorBrands; break;
            case 2: currentSubMenu = ledLightBrands; maxItems = numLedLightBrands; break;
            case 3: currentSubMenu = whiteboardBrands; maxItems = numWhiteboardBrands; break;
            case 4: currentSubMenu = touchDisplayBrands; maxItems = numTouchDisplayBrands; break;
            default: return;
        }
    } else if (inIrRemoteMenu) {
        currentSubMenu = irRemoteMenu;
        maxItems = numIrRemoteItems;
    } else {
        switch(currentMenuItem) {
            case 0: currentSubMenu = bluetoothMenu; maxItems = numBluetoothItems; break;
            case 1: currentSubMenu = wifiMenu; maxItems = numWifiItems; break;
            case 2: currentSubMenu = rfidMenu; maxItems = numRfidItems; break;
            case 3: currentSubMenu = rfMenu; maxItems = numRfItems; break;
            case 4: currentSubMenu = irMenu; maxItems = numIrItems; break;
            case 5: currentSubMenu = filesMenu; maxItems = numFilesItems; break;
            case 6: currentSubMenu = configMenu; maxItems = numConfigItems; break;
            case 7: currentSubMenu = settingsMenu; maxItems = numSettingsItems; break;
            default: return;
        }
    }
    
    int maxVisibleItems = (M5.Lcd.height() - 25) / itemSpacing;
    int scrollOffset = max(0, currentSubMenuItem - maxVisibleItems + 1);
    int endIndex = min(scrollOffset + maxVisibleItems, maxItems + 1);
    
    for (int i = scrollOffset; i < endIndex; i++) {
        int yPos = 25 + ((i - scrollOffset) * itemSpacing);
        M5.Lcd.setTextSize(2);
        
        const char* menuText = (i < maxItems) ? currentSubMenu[i] : "<Back";
        int textWidth = M5.Lcd.textWidth(menuText);
        int x = (M5.Lcd.width() - textWidth) / 2;
        
        if (i == currentSubMenuItem) {
            M5.Lcd.fillRoundRect(x - 5, yPos - 2, textWidth + 10, 20, 8, WHITE);
            M5.Lcd.setTextColor(BLACK);
        } else {
            M5.Lcd.fillRoundRect(x - 5, yPos - 2, textWidth + 10, 20, 8, 0x4208);
            M5.Lcd.setTextColor(WHITE);
        }
        M5.Lcd.drawString(menuText, x, yPos);
    }
    
    M5.Lcd.setTextSize(2);
    M5.Lcd.setTextColor(RED);
    if (scrollOffset > 0) {
        M5.Lcd.drawString("^", M5.Lcd.width() - 15, 30);
    }
    if (endIndex < maxItems + 1) {
        M5.Lcd.drawString("v", M5.Lcd.width() - 15, M5.Lcd.height() - 30);
    }
}

void handleSubMenuSelection() {
    if (inIrRemoteMenu) {
        if (currentSubMenuItem == getMaxSubMenuItems()) {
            inIrRemoteMenu = false;
            displaySubMenu();
        } else {
            currentDeviceType = currentSubMenuItem;
            inBrandMenu = true;
            currentBrandMenuItem = 0;
            displaySubMenu();
        }
    } else if (currentMenuItem == 4 && currentSubMenuItem == 0) {
        inIrRemoteMenu = true;
        currentSubMenuItem = 0;
        displaySubMenu();
    } else if (currentSubMenuItem == getMaxSubMenuItems()) {
        inSubmenu = false;
        displayMenuItem();
    }
}

void drawHeader() {
    M5.Lcd.setTextSize(1);
    M5.Lcd.setTextColor(WHITE);
    int titleWidth = M5.Lcd.textWidth("SignalXNetwork V1.0");
    M5.Lcd.drawString("SignalXNetwork V1.0", (M5.Lcd.width() - titleWidth) / 2, 5);
    
    int batPercentage = M5.Power.getBatteryLevel();
    M5.Lcd.drawString(String(batPercentage) + "%", M5.Lcd.width() - 35, 5);
    
    M5.Lcd.drawLine(0, 20, M5.Lcd.width(), 20, WHITE);
}

void drawNavigationDots() {
    int dotSpacing = 10;
    int dotRadius = 3;
    int totalWidth = (numMenuItems * (dotRadius * 2 + dotSpacing)) - dotSpacing;
    int startX = (M5.Lcd.width() - totalWidth) / 2;
    int y = M5.Lcd.height() - 15;

    for (int i = 0; i < numMenuItems; i++) {
        if (i == currentMenuItem) {
            M5.Lcd.fillCircle(startX + i * (dotRadius * 2 + dotSpacing), y, dotRadius, WHITE);
        } else {
            M5.Lcd.drawCircle(startX + i * (dotRadius * 2 + dotSpacing), y, dotRadius, WHITE);
        }
    }
}

void displayActionOverlay() {
    int overlayWidth = 140;
    int overlayHeight = 50;
    int x = (M5.Lcd.width() - overlayWidth) / 2;
    int y = (M5.Lcd.height() - overlayHeight) / 2;
    
    M5.Lcd.fillRoundRect(x, y, overlayWidth, overlayHeight, 8, 0x4208);
    M5.Lcd.drawRoundRect(x, y, overlayWidth, overlayHeight, 8, WHITE);
    
    M5.Lcd.setTextSize(2);
    int textWidth = M5.Lcd.textWidth(brandActions[0]);
    int textX = (M5.Lcd.width() - textWidth) / 2;
    int textY = y + 15;
    
    M5.Lcd.fillRoundRect(textX - 5, textY - 2, textWidth + 10, 20, 8, WHITE);
    M5.Lcd.setTextColor(BLACK);
    M5.Lcd.drawString(brandActions[0], textX, textY);
}

void spamIRCodes(int deviceType, int brandIndex) {
    const int REPEAT_COUNT = 15;
    const int DELAY_MS = 100;
    
    const IRCodes* codes;
    switch(deviceType) {
        case 0: codes = &TV_CODES[brandIndex]; break;
        case 1: codes = &PROJECTOR_CODES[brandIndex]; break;
        case 2: codes = &LED_CODES[brandIndex]; break;
        case 3: codes = &WHITEBOARD_CODES[brandIndex]; break;
        case 4: codes = &TOUCH_DISPLAY_CODES[brandIndex]; break;
        default: return;
    }
    
    for(int i = 0; i < REPEAT_COUNT; i++) {
        for(int j = 0; j < 5; j++) {
            IrSender.sendNECMSB(codes->powerOn[j], 32);
            delay(DELAY_MS);
        }
        for(int j = 0; j < 5; j++) {
            IrSender.sendNECMSB(codes->powerOff[j], 32);
            delay(DELAY_MS);
        }
    }
}

void showSpamStatus() {
    M5.Lcd.fillScreen(BLACK);
    M5.Lcd.setTextSize(2);
    M5.Lcd.setTextColor(RED);
    M5.Lcd.drawString("Spamming IR", 10, M5.Lcd.height()/2 - 20);
}

int getMaxSubMenuItems() {
    if (inBrandMenu) {
        switch(currentDeviceType) {
            case 0: return numTvBrands;
            case 1: return numProjectorBrands;
            case 2: return numLedLightBrands;
            case 3: return numWhiteboardBrands;
            case 4: return numTouchDisplayBrands;
            default: return 0;
        }
    }
    
    if (inIrRemoteMenu) {
        return numIrRemoteItems;
    }
    
    switch(currentMenuItem) {
        case 0: return numBluetoothItems;
        case 1: return numWifiItems;
        case 2: return numRfidItems;
        case 3: return numRfItems;
        case 4: return numIrItems;
        case 5: return numFilesItems;
        case 6: return numConfigItems;
        case 7: return numSettingsItems;
        default: return 0;
    }
}
